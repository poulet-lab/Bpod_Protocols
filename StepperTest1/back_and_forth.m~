function back_and_forth
global BpodSystem

%% Setup
MaxTrials = 10;

%--- Define parameters and trial structure
S = BpodSystem.ProtocolSettings;
if isempty(fieldnames(S))
    S.Acceleration = 6400;
    S.Speed = 6400;
end

%% Helper Function for Stepper Commands
helper =  @(id,val) [uint8(id) typecast(int16(val),'uint8')];

%% Configure Stepper Motor Module
ModuleWrite('Stepper1', helper('A',S.Acceleration))
ModuleWrite('Stepper1', helper('V',S.Speed))
ModuleWrite('Stepper1','Z')

%% Load Serial Messages
LoadSerialMessages('Stepper1', {helper('D',20)}, 1);
LoadSerialMessages('Stepper1', {helper('P',0)}, 1);

%% Main loop
for currentTrial = 1:MaxTrials
    sma = NewStateMachine();
    sma = AddState(sma, 'Name', 'A', ...
        'Timer', 0,...
        'StateChangeConditions', {'Stepper1_Stop', 'B'},...
        'OutputActions', {'Stepper1', 1}); 
    sma = AddState(sma, 'Name', 'B', ...
        'Timer', 0,...
        'StateChangeConditions', {'Stepper1_Stop', 'A'},...
        'OutputActions', {'Stepper1', 2}); 
    
    SendStateMatrix(sma);
    RawEvents = RunStateMatrix;
    
    if ~isempty(fieldnames(RawEvents))
        BpodSystem.Data = AddTrialEvents(BpodSystem.Data,RawEvents);
        BpodSystem.Data.TrialSettings(currentTrial) = S;
        SaveBpodSessionData;
    end

    HandlePauseCondition;
    if BpodSystem.Status.BeingUsed == 0
        return
    end
end